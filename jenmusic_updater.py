#!/usr/bin/env python3
import os
import sys
import json
import logging
from datetime import datetime
from typing import List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

class JenMusicUpdater:
    def __init__(self):
        self.log_path = "docs/log.json"
        self.index_path = "docs/index.html"
        self.telegram_token: Optional[str] = None
        self.telegram_chat_id: Optional[str] = None

    def _load_environment_variables(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.telegram_token = os.environ.get("TELEGRAM_TOKEN")
        self.telegram_chat_id = os.environ.get("TELEGRAM_CHAT_ID")

        if not self.telegram_token or not self.telegram_chat_id:
            logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            logger.error("TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            sys.exit(1)

    def _generate_html(self, tracks: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–æ–≤"""
        html_content = [
            "<!DOCTYPE html>",
            "<html lang='ru'>",
            "<head>",
            "    <meta charset='UTF-8'>",
            "    <meta name='viewport' content='width=device-width, initial-scale=1.0'>",
            "    <title>JenMusic</title>",
            "    <style>",
            "        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }",
            "        h1 { color: #2c3e50; }",
            "        ul { list-style-type: none; padding: 0; }",
            "        li { margin: 10px 0; }",
            "        a { color: #3498db; text-decoration: none; }",
            "        a:hover { text-decoration: underline; }",
            "    </style>",
            "</head>",
            "<body>",
            "    <h1>üéß JenMusic</h1>",
            "    <ul>"
        ]

        for track in tracks:
            html_content.append(f"        <li><a href='{track}' target='_blank'>{track}</a></li>")

        html_content.extend([
            "    </ul>",
            "    <footer>",
            f"        <p>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>",
            "    </footer>",
            "</body>",
            "</html>"
        ])

        return "\n".join(html_content)

    def _read_log(self) -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥-—Ñ–∞–π–ª —Å —Ç—Ä–µ–∫–∞–º–∏"""
        if not os.path.exists(self.log_path):
            logger.warning("–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
            return []

        try:
            with open(self.log_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
            return []

    def _save_log(self, links: List[str]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –≤ –ª–æ–≥-—Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(self.log_path), exist_ok=True)
            with open(self.log_path, 'w', encoding='utf-8') as f:
                json.dump(links, f, indent=2, ensure_ascii=False)
            logger.info(f"–õ–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ({len(links)} —Ç—Ä–µ–∫–æ–≤)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}")
            sys.exit(1)

    def _save_html(self, links: List[str]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç—Ä–µ–∫–∞–º–∏"""
        try:
            os.makedirs(os.path.dirname(self.index_path), exist_ok=True)
            with open(self.index_path, 'w', encoding='utf-8') as f:
                f.write(self._generate_html(links))
            logger.info(f"HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ({len(links)} —Ç—Ä–µ–∫–æ–≤)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            sys.exit(1)

    def _get_yandex_links(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—Ä–µ–∫–∏ –∏–∑ Telegram"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ Telegram API
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_links = [
            "https://music.yandex.ru/album/123456/track/7891011",
            "https://music.yandex.ru/album/987654/track/3210123"
        ]
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(test_links)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫")
        return test_links

    def run(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        logger.info("–ó–∞–ø—É—Å–∫ JenMusic Updater")
        
        self._load_environment_variables()
        logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        old_links = self._read_log()
        new_links = self._get_yandex_links()
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(old_links)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏ {len(new_links)} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_links = list(dict.fromkeys(old_links + new_links))
        logger.info(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {len(unique_links)}")
        
        self._save_log(unique_links)
        self._save_html(unique_links)
        
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    try:
        updater = JenMusicUpdater()
        updater.run()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)