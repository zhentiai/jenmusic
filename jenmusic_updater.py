#!/usr/bin/env python3
import os
import sys
import json
import logging
from datetime import datetime
from typing import List, Optional
from dotenv import load_dotenv
from telethon import TelegramClient, events

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
load_dotenv()
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

class JenMusicUpdater:
    def __init__(self):
        self.log_path = "docs/log.json"
        self.index_path = "docs/index.html"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self._validate_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
        self.client = TelegramClient(
            'jenmusic_session',
            int(os.getenv('API_ID')),
            os.getenv('API_HASH')
        )

    def _validate_config(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = {
            'TELEGRAM_TOKEN': os.getenv('TELEGRAM_TOKEN'),
            'TELEGRAM_CHAT_ID': os.getenv('TELEGRAM_CHAT_ID'),
            'API_ID': os.getenv('API_ID'),
            'API_HASH': os.getenv('API_HASH')
        }
        
        missing = [name for name, value in required_vars.items() if not value]
        if missing:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
            sys.exit(1)

    def _generate_html(self, tracks: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JenMusic Collection</title>
    <style>
        body {{
            font-family: 'Segoe UI', sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        h1 {{
            color: #2c3e50;
            text-align: center;
        }}
        .track-list {{
            list-style: none;
            padding: 0;
        }}
        .track-item {{
            background: white;
            margin: 10px 0;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        .track-link {{
            color: #3498db;
            text-decoration: none;
            font-weight: 500;
        }}
        footer {{
            text-align: center;
            margin-top: 30px;
            color: #7f8c8d;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <h1>üéµ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –º—É–∑—ã–∫–∏</h1>
    <ul class="track-list">
        {"".join(f'<li class="track-item"><a href="{track}" class="track-link" target="_blank">{track}</a></li>' for track in tracks)}
    </ul>
    <footer>
        –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    </footer>
</body>
</html>"""

    async def _get_telegram_links(self) -> List[str]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ Telegram"""
        links = []
        try:
            await self.client.start(bot_token=os.getenv('TELEGRAM_TOKEN'))
            
            chat = await self.client.get_entity(int(os.getenv('TELEGRAM_CHAT_ID')))
            async for message in self.client.iter_messages(chat, limit=50):
                if message.text and 'yandex.ru' in message.text:
                    links.append(message.text)
                    
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫ –∏–∑ Telegram")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Telegram: {str(e)}")
        finally:
            await self.client.disconnect()
            
        return links

    def _process_links(self, old_links: List[str], new_links: List[str]) -> List[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ø–∏—Å–∫–∏ —Å—Å—ã–ª–æ–∫"""
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        combined = [link for link in set(old_links + new_links) if link and link.strip()]
        logger.info(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {len(combined)}")
        return combined

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫
        old_links = []
        if os.path.exists(self.log_path):
            try:
                with open(self.log_path, 'r', encoding='utf-8') as f:
                    old_links = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(old_links)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {str(e)}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫
        with self.client:
            new_links = self.client.loop.run_until_complete(self._get_telegram_links())
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        unique_links = self._process_links(old_links, new_links)
        
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –ª–æ–≥–∞
            os.makedirs(os.path.dirname(self.log_path), exist_ok=True)
            with open(self.log_path, 'w', encoding='utf-8') as f:
                json.dump(unique_links, f, indent=2, ensure_ascii=False)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
            with open(self.index_path, 'w', encoding='utf-8') as f:
                f.write(self._generate_html(unique_links))
            
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            sys.exit(1)

if __name__ == "__main__":
    try:
        updater = JenMusicUpdater()
        updater.run()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)